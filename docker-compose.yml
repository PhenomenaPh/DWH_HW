x-postgres-common: &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U admin --dbname=airline_tickets'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  db_primary:
    <<: *postgres-common
    container_name: postgres_primary
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: airline_tickets
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpassword
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby=on
      -c hot_standby_feedback=on
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - ./schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
      - ./create_views.sql:/docker-entrypoint-initdb.d/02_create_views.sql

  db_replica:
    <<: *postgres-common
    container_name: postgres_replica
    ports:
      - "5433:5432"
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=db_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db_primary
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data

  db_dwh:
    <<: *postgres-common
    container_name: postgres_dwh
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: airline_tickets_dwh
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminpassword
    volumes:
      - postgres_dwh_data:/var/lib/postgresql/data
      - ./dwh_schema.sql:/docker-entrypoint-initdb.d/01_dwh_schema.sql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  debezium:
    image: debezium/connect:2.3
    container_name: debezium
    depends_on:
      - kafka
      - db_primary
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_config
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter

  dmp_service:
    build:
      context: .
      dockerfile: Dockerfile.dmp
    container_name: dmp_service
    depends_on:
      - kafka
      - db_dwh
      - debezium
    restart: always
    environment:
      PYTHONUNBUFFERED: 1

volumes:
  postgres_primary_data:
  postgres_replica_data:
  postgres_dwh_data: